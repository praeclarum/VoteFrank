@page
@{
    ViewData["Title"] = "Home";
    var elections = Election.All;
    var people = Person.All;
    

    var winners = people.Where (x => x.NumGeneralWins > 1)
        .Select (p => (p, p.Races.Where(x => x.Winner == p).OrderByDescending(x => x.Date).First ()))
        .OrderByDescending (x => x.Item2.Date)
        .ThenByDescending (x => x.Item1.NumGeneralWins)
        .Take(100);

    (Position, Person, Election, int?, int, double, int?) GetPositionData(Position p)
    {
        var races = p.Races.Where(x => x.Election.Kind != "Primary").OrderByDescending(x => x.Date).ToList ();
        var lastR = races.FirstOrDefault();
        var lastE = lastR?.Election;
        var lastW = lastR?.Winner;
        int? nextYear = null;
        if (races.Count > 1) {
            var dyears = races[0].Election.Year - races[1].Election.Year;
            nextYear = races[0].Election.Year + dyears;
        }
        var precincts = races.Count > 0 ? races.Average (x => x.Votes.Values.First().PrecinctCounts.Count) : 0;
        var numUniqueWinners = races.Select (x => x.Winner).Distinct().Count();
        var volatility = races.Count > 0 ? Math.Round(numUniqueWinners / (double)races.Count * 100.0) : 0.0;
        int? margin = null;
        if (lastR != null && lastR.Votes.Count > 1) {
            var vs = lastR.Votes.Values.OrderByDescending (x => x.TotalCount).ToList ();
            margin = vs[0].TotalCount - vs[1].TotalCount;
        }
        return (p, lastW, lastE, nextYear, (int)precincts, volatility, margin);
    }
    var positions = Position.All.OrderBy(x => x.Title).Select(GetPositionData).ToList();
}

<h1>Vote Frank!</h1>

<h2>Electable Offices</h2>

<table cellspacing="0" cellpadding="2">
<tr>
    <th>Office</th>
    <th class="num">Precincts</th>
    <th>Incumbant</th>
    <th class="num">Last Year</th>
    <th class="num">Next Year</th>
    <th class="num">Volatility</th>
    <th class="num">Victory Margin</th>
</tr>
@foreach (var (p, person, e, nextYear, nprecincts, volatility, margin) in positions) {
    var thisyear = false;//nextYear == (DateTime.Now.Year);
    var clas = thisyear ? "thisyear" : "";
<tr class="@clas">
    <td><a href="/position/@Uri.EscapeDataString(p.Title)">@p</a></td>
    <td class="num">@nprecincts</td>
    <td><a href="/person/@Uri.EscapeDataString(person?.Name??"")">@person</a></td>
    <td class="num"><a href="/position/@Uri.EscapeDataString(p.Title)">@e?.Year</a></td>
    <td class="num">@nextYear</td>
    <td class="num">@volatility</td>
    <td class="num">@(margin?.ToString("#,0") ?? "-")</td>
</tr>
}
</table>


<h2>Winners</h2>

<ol>
@foreach (var (p, r) in winners) {
<li><a href="/person/@Uri.EscapeDataString(p.Name)">@p.Name</a> @p.NumGeneralWins wins 
   <a href="/position/@Uri.EscapeDataString(r.Position.Title)">@r.Election.Year @r.Position</a></li>
}
</ol>


<h2>@elections.Length Elections</h2>

<table>
@foreach (var e in elections.OrderByDescending(x => x.Date)) {
<tr><th><a href="/election/@e.Year/@e.Month">@e.Year-@e.Month @e.Kind</a></th></tr>
}
</table>
